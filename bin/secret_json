#! /usr/bin/env ruby

require 'optparse'
require_relative "../lib/secret_json"

encryption_key = nil
new_encryption_key = nil
add_keys = []
decrypt_keys = []
delete_keys = []

options = ARGV.dup
action = options.shift

parser = OptionParser.new do |opts|
  opts.banner = "Usage: secret_json encrypt|decrypt [options] file_path"

  opts.on('--key ENCRYPTION_KEY', String, "Encryption key used to encrypt strings in the JSON file. This value can also be passed in the SECRET_JSON_KEY environment variable or via STDIN.") do |value|
    encryption_key = value
  end

  opts.on('--add JSON_KEY', String, "Add a key to the encrypted elements. You can specify the value as well by using key=value.") do |value|
    add_keys << value
  end

  opts.on('--decrypt JSON_KEY', String, "Move a key to the decrypted elements. You can specify the value as well by using key=value.") do |value|
    decrypt_keys << value
  end

  opts.on('--delete JSON_KEY', String, "Remove a key.") do |value|
    delete_keys << value
  end

  opts.on('--new-key ENCRYPTION_KEY', String, "Set a new encryption key for the file.") do |value|
    new_encryption_key = value
  end

  opts.on("--help", "Prints this help") do
    puts opts.help
    exit
  end
end
parser.parse!(options)

unless ["encrypt", "decrypt"].include?(action)
  STDERR.puts parser.banner
  exit 1
end

file_path = options[0]
unless file_path
  STDERR.puts parser.banner
  exit 1
end

unless encryption_key
  encryption_key = STDIN.read.chomp if STDIN.ready?
end

secrets = nil
if File.exist?(file_path)
  secrets = SecretJson.new(file_path, encryption_key)
else
  secrets = SecretJson.new(nil, encryption_key)
end

if action == "encrypt"
  secrets.encryption_key = new_encryption_key if new_encryption_key

  add_keys.each do |key|
    if key.include?("=")
      key, value = key.split("=", 2)
      secrets[key] = value
    end
    secrets[key] = nil unless secrets.include?(key)
    secrets.encrypt!(key)
  end

  decrypt_keys.each do |key|
    if key.include?("=")
      key, value = key.split("=", 2)
      secrets[key] = value
    end
    secrets[key] = nil unless secrets.include?(key)
    secrets.decrypt!(key)
  end

  delete_keys.each do |key|
    secrets.delete(key)
  end

  secrets.save(file_path)
elsif action == "decrypt"
  if File.exist?(file_path)
    STDERR.puts(JSON.pretty_generate(secrets.to_h))
  else
    STDERR.puts("File not found: #{file_path}")
    exit 1
  end
else
  exit 1
end
